// export const parseVedicCode = (vedicCode) => {
//     let jsCode = vedicCode;
  
//     // Mapping for keywords and symbols to JS-friendly equivalents
//     const keywordMap = {
//       "рдкреНрд░рд╛рд░рдВрдн": "function start() {",
//       "рд╕рдорд╛рдкреНрдд": "}",
//       "рдЧрдгрдирд╛": "let",
//       "рдореБрджреНрд░рдг": "console.log"
//     };
  
//     // Replace Vedic keywords with their JavaScript equivalents
//     Object.keys(keywordMap).forEach(keyword => {
//       const regex = new RegExp(`\\b${keyword}\\b`, "g");
//       jsCode = jsCode.replace(regex, keywordMap[keyword]);
//     });
  
//     // Replace variable assignments
//     jsCode = jsCode.replace(/\bрдЧрдгрдирд╛\s+(\w+)\s*=\s*(.+)/g, "let $1 = $2;");
  
//     // Replace print statement with console.log
//     jsCode = jsCode.replace(/\bрдореБрджреНрд░рдг\((.*?)\)/g, "console.log($1);");
  
//     // Handle unknown characters (e.g., Devanagari symbols)
//     const vedicSymbolsRegex = /[рдЕ-рд╣реТреСрд┐регЁСАЕЁСАУЁСА╗ЁСАб]+/g;
//     jsCode = jsCode.replace(vedicSymbolsRegex, (match) => `"${match}"`);
  
//     // Check for unexpected tokens and sanitize them
//     jsCode = jsCode.replace(/[^a-zA-Z0-9\s{}=;()]/g, ''); // Sanitize any other unexpected characters
    
//     return jsCode;
//   };
  

export const parseVedicCode = (vedicCode) => {
    let jsCode = vedicCode;
  
    // Replace "рдкреНрд░рд╛рд░рдВрдн" and "рд╕рдорд╛рдкреНрдд" with JS-friendly structure
    jsCode = jsCode.replace("рдкреНрд░рд╛рд░рдВрдн", "").replace("рд╕рдорд╛рдкреНрдд", "");
  
    // Replace "рдЧрдгрдирд╛ x = ..." with "let x = ..."
    jsCode = jsCode.replace(/рдЧрдгрдирд╛\s+(\w+)\s*=\s*(.+)/g, "let $1 = $2;");
  
    // Replace "рдореБрджреНрд░рдг(x)" with "console.log(x)"
    jsCode = jsCode.replace(/рдореБрджреНрд░рдг\((.*?)\)/g, "console.log($1);");
  
    return jsCode;
  };
  